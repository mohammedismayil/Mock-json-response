{"version":3,"sources":["Utils/API.js","Pages/MockJson.js","App.js","reportWebVitals.js","Pages/Allmocks.js","index.js"],"names":["axios","get","headers","id","data","put","MockJsonData","post","MockJson","props","useParams","useState","count","setCount","createdID","setcreatedID","json","setjson","isFromEdit","reloadInputs","console","log","_id","handleFormSubmit","event","preventDefault","str","JSON","parse","e","IsJsonString","alert","API","then","res","catch","err","useEffect","setTimeout","stringify","getMockDataForID","className","value","onChange","target","name","placeholder","disabled","onClick","length","to","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Allmocks","mocks","setMocks","map","mock","index","ReactDOM","render","exact","path","element","hey","document","getElementById"],"mappings":"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","file":"static/js/main.e9e0119b.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n  // Gets all MockJsons\n  getAllMocks: function () {\n    return axios.get(\"/api/MockJsons\", {\n      headers: {\n        \"Content-Type\": \"application/json  \",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  },\n  // Gets the MockJson with the given id\n  getMockJson: function (id) {\n    return axios.get(\"/api/MockJsons/\" + id);\n  },\n  // Gets the MockJson with the given id\n  updateMockJson: function (id, data) {\n    return axios.put(\"http://localhost:5000/api/mockjsons/\" + id, data);\n  },\n  // Deletes the MockJson with the given id\n  deleteMockJson: function (id) {\n    return axios.delete(\"/api/MockJsons/\" + id);\n  },\n  // Saves a MockJson to the database\n  saveMockJson: function (MockJsonData) {\n    return axios.post(\"/api/MockJsons\", MockJsonData);\n  },\n};\n","import { React, useState, useEffect } from \"react\";\n\nimport API from \"../Utils/API\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\n\n//   componentDidMount() {\n//     // Runs after the first render() lifecycle((\n//     console.log(\"cunt\");\n//     console.log(this.props);\n//     if (this.state.isFromEdit) {\n//       this.getMockDataForID();\n//     }\n//   }\n\nexport default function MockJson(props) {\n  let { id } = useParams();\n  const [count, setCount] = useState(0);\n  const [createdID, setcreatedID] = useState(\"\");\n  const [json, setjson] = useState(\"\");\n  const [isFromEdit, setisFromEdit] = useState(props.isFromEdit);\n  useEffect(() => {\n    if (count < 1) {\n      setTimeout(() => {\n        setCount(count + 1);\n        getMockDataForID(id);\n      }, 1000);\n    }\n  });\n\n  function handleInputChange(event) {\n    setjson(event.target.value);\n  }\n  function reloadInputs(data) {\n    console.log(\"reloading inputs\");\n    setjson(\"\");\n    setcreatedID(data._id);\n  }\n\n  function IsJsonString(str) {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n  function getMockDataForID(id) {\n    console.log(id);\n    if (id) {\n      API.getMockJson(id)\n        .then((res) => {\n          console.log(res.data);\n          setjson(JSON.stringify(res.data.json));\n          setcreatedID(res.data._id);\n          console.log(JSON.parse(res.data.json));\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    console.log(\"form submitted\");\n    if (json) {\n      if (IsJsonString(json)) {\n        if (isFromEdit) {\n          API.updateMockJson(id, { json: json })\n            .then((res) => reloadInputs(res.data))\n            .catch((err) => console.log(err));\n        } else {\n          API.saveMockJson({\n            json: json,\n          })\n            .then((res) => reloadInputs(res.data))\n            .catch((err) => console.log(err));\n        }\n      } else {\n        alert(\"enter a valid json\");\n      }\n    }\n  }\n\n  // const createdID = this.state.createdID;\n  return (\n    <div className=\"content-center justify-center pt-10\">\n      {isFromEdit ? (\n        <h1 className=\"font-bold text-center text-2xl\">Edit the json mock</h1>\n      ) : (\n        <h1 className=\"font-bold text-center text-2xl\">Add a new json mock</h1>\n      )}\n\n      <div className=\"m-auto w-1/2 content-center justify-center flex-col pt-10\">\n        <div>\n          <textarea\n            value={json}\n            onChange={handleInputChange}\n            name=\"json\"\n            placeholder=\"JSON (required)\"\n            className=\"h-40 w-full border border-green-800 px-2 py-2\"\n          />\n        </div>\n        <div className=\"flex content-center justify-center\">\n          <div className=\"content-center justify-center\">\n            {isFromEdit ? (\n              <button\n                disabled={!json}\n                onClick={handleFormSubmit}\n                className=\"bg-blue-700 rounded-sm text-white px-5 py-2 content-center justify-center w-24 mt-10\"\n              >\n                Edit\n              </button>\n            ) : (\n              <button\n                disabled={!json}\n                onClick={handleFormSubmit}\n                className=\"bg-green-700 rounded-lg text-white px-5 py-2 content-center justify-center w-24 mt-10\"\n              >\n                Add\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {\n        createdID.length > 0 ? (\n          <div>\n            <h2>Check out your mock json here:</h2>\n            <Link to={\"/\" + createdID}>http://localhost:3000/{createdID}</Link>\n          </div>\n        ) : (\n          <div></div>\n        )\n        // href={\"http:localhost:3000/\"+this.state.createdID\n      }\n    </div>\n  );\n}\n// /","\nimport './App.css';\nimport MockJson from './Pages/MockJson';\n\n\nfunction App() {\n  return (\n    <MockJson>\n\n      \n    </MockJson>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect } from \"react\";\n\nimport API from \"../Utils/API\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Allmocks() {\n  const [mocks, setMocks] = useState([]);\n\n  useEffect(() => {\n    if (mocks.length == 0) {\n      API.getAllMocks()\n        .then((res) => {\n          console.log(res.data);\n          setMocks(res.data);\n        })\n        .catch((err) => console.log(err));\n    }\n  });\n  //   getAllMocks = () => {\n  //     API.getMockJson()\n  //       .then((res) => {\n  //         setMocks(res.mocks);\n  //       })\n  //       .catch((err) => console.log(err));\n  //   };\n\n  return (\n    <div>\n      <h1>Mocks</h1>\n\n      {mocks.map((mock, index) => (\n        <div>\n          <h2>{mock._id}</h2>\n          <Link to={\"/\" + mock._id}>http://localhost:5000/{mock._id}</Link>\n          <Link to={\"/edit/\" + mock._id}>\n            <button>Edit</button>\n          </Link>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter,Routes,\n  Route } from \"react-router-dom\";\nimport MockJson from './Pages/MockJson';\nimport Allmocks from \"./Pages/Allmocks\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Routes>\n      <Route exact path=\"/\" element={<App />} />\n      <Route path=\"/v0.1/:id\" element={<MockJson />} />\n      <Route path=\"/allmocks\" element={<Allmocks />} />\n      <Route\n        path=\"/edit/:id\"\n        element={<MockJson isFromEdit={true} hey={\"oioioi\"} />}\n      />\n      {/* <Route path=\"/hey\" element={<Books />} /> */}\n    </Routes>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}