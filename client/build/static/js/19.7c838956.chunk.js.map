{"version":3,"sources":["utils/API.js","pages/MockJson.js"],"names":["require","id","axios","get","MockJson","props","useParams","useState","count","setCount","setcreatedID","setjson","isFromEdit","useEffect","setTimeout","console","log","API","then","res","data","JSON","stringify","json","_id","parse","catch","err","getMockDataForID"],"mappings":"gOAEe,GADNA,EAAQ,KAYF,SAAUC,GACrB,OAAOC,IAAMC,IAAI,kBAAoBF,K,OCC1B,SAASG,EAASC,GAC/B,IAAMJ,EAAOK,cAAPL,GACN,EAA0BM,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,mBAAS,IAA3C,mBAAkBG,GAAlB,WACA,EAAwBH,mBAAS,IAAjC,mBAAaI,GAAb,WACA,EAAoCJ,mBAASF,EAAMO,YAAnD,6BA+DA,OA9DAC,qBAAU,WACJL,EAAQ,GACVM,YAAW,WACTL,EAASD,EAAQ,GAuBvB,SAA0BP,GACxBc,QAAQC,IAAIf,GACRA,GACFgB,EAAgBhB,GACbiB,MAAK,SAACC,GACLJ,QAAQC,IAAIG,EAAIC,MAChBT,EAAQU,KAAKC,UAAUH,EAAIC,KAAKG,OAChCb,EAAaS,EAAIC,KAAKI,KACtBT,QAAQC,IAAIK,KAAKI,MAAMN,EAAIC,KAAKG,UAEjCG,OAAM,SAACC,GAAD,OAASZ,QAAQC,IAAIW,MAhC5BC,CAAiB3B,KAChB,QA0DL,iCACE","file":"static/js/19.7c838956.chunk.js","sourcesContent":["import axios from 'axios';\nvar fs = require(\"fs\");\nexport default {\n  // Gets all MockJsons\n  getAllMocks: function () {\n    return axios.get(\"/api/MockJsons\", {\n      headers: {\n        \"Content-Type\": \"application/json  \",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  },\n  // Gets the MockJson with the given id\n  getMockJson: function (id) {\n    return axios.get(\"/api/MockJsons/\" + id);\n  },\n  // Gets the MockJson with the given id\n  updateMockJson: function (id, data) {\n    return axios.put(\"http://localhost:5000/api/mockjsons/\" + id, data);\n  },\n  // Deletes the MockJson with the given id\n  deleteMockJson: function (id) {\n    return axios.delete(\"/api/MockJsons/\" + id);\n  },\n  // Saves a MockJson to the database\n  saveMockJson: function (MockJsonData) {\n    return axios.post(\"/api/MockJsons\", MockJsonData);\n  },\n\n  // Deletes all Mocks\n  deleteAllMocks: function (id) {\n    return axios.get(\"/api/MockJsons/deleteAllMocks/\");\n  },\n  // Backup all Mocks\n  backupAllMocks: function (id) {\n    return axios.get(\"/api/MockJsons/backupMocks/\");\n  },\n};\n","import { React, useState, useEffect } from \"react\";\n\nimport API from \"../utils/API\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\n\n//   componentDidMount() {\n//     // Runs after the first render() lifecycle((\n//     console.log(\"cunt\");\n//     console.log(this.props);\n//     if (this.state.isFromEdit) {\n//       this.getMockDataForID();\n//     }\n//   }\n\nexport default function MockJson(props) {\n  let { id } = useParams();\n  const [count, setCount] = useState(0);\n  const [createdID, setcreatedID] = useState(\"\");\n  const [json, setjson] = useState(\"\");\n  const [isFromEdit, setisFromEdit] = useState(props.isFromEdit);\n  useEffect(() => {\n    if (count < 1) {\n      setTimeout(() => {\n        setCount(count + 1);\n        getMockDataForID(id);\n      }, 1000);\n    }\n  });\n\n  function handleInputChange(event) {\n    setjson(event.target.value);\n  }\n  function reloadInputs(data) {\n    console.log(\"reloading inputs\");\n    setjson(\"\");\n    setcreatedID(data._id);\n  }\n\n  function IsJsonString(str) {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n  function getMockDataForID(id) {\n    console.log(id);\n    if (id) {\n      API.getMockJson(id)\n        .then((res) => {\n          console.log(res.data);\n          setjson(JSON.stringify(res.data.json));\n          setcreatedID(res.data._id);\n          console.log(JSON.parse(res.data.json));\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    console.log(\"form submitted\");\n    if (json) {\n      if (IsJsonString(json)) {\n        if (isFromEdit) {\n          API.updateMockJson(id, { json: json })\n            .then((res) => reloadInputs(res.data))\n            .catch((err) => console.log(err));\n        } else {\n          API.saveMockJson({\n            json: json,\n          })\n            .then((res) => reloadInputs(res.data))\n            .catch((err) => console.log(err));\n        }\n      } else {\n        alert(\"enter a valid json\");\n      }\n    }\n  }\n\n  // const createdID = this.state.createdID;\n  return (\n    <div>\n      <h1>ughhih</h1>\n    </div>\n\n    //   <div className=\"content-center justify-center pt-10\">\n    //     {isFromEdit ? (\n    //       <h1 className=\"font-bold text-center text-2xl\">Edit the json mock</h1>\n    //     ) : (\n    //       <h1 className=\"font-bold text-center text-2xl\">\n    //         Add a new json mock\n    //       </h1>\n    //     )}\n\n    //     <div className=\"m-auto w-1/2 content-center justify-center flex-col pt-10\">\n    //       <div>\n    //         <textarea\n    //           value={json}\n    //           onChange={handleInputChange}\n    //           name=\"json\"\n    //           placeholder=\"JSON (required)\"\n    //           className=\"h-40 w-full border border-green-800 px-2 py-2\"\n    //         />\n    //       </div>\n    //       <div className=\"flex content-center justify-center\">\n    //         <div className=\"content-center justify-center\">\n    //           {isFromEdit ? (\n    //             <button\n    //               disabled={!json}\n    //               onClick={handleFormSubmit}\n    //               className=\"bg-blue-700 rounded-sm text-white px-5 py-2 content-center justify-center w-24 mt-10\"\n    //             >\n    //               Edit\n    //             </button>\n    //           ) : (\n    //             <button\n    //               disabled={!json}\n    //               onClick={handleFormSubmit}\n    //               className=\"bg-green-700 rounded-lg text-white px-5 py-2 content-center justify-center w-24 mt-10\"\n    //             >\n    //               Add\n    //             </button>\n    //           )}\n    //         </div>\n    //       </div>\n    //     </div>\n\n    //     {\n    //       createdID.length > 0 ? (\n    //         <div>\n    //           <h2>Check out your mock json here:</h2>\n    //           <Link to={\"/\" + createdID}>\n    //             http://localhost:3000/{createdID}\n    //           </Link>\n    //         </div>\n    //       ) : (\n    //         <div></div>\n    //       )\n    //       // href={\"http:localhost:3000/\"+this.state.createdID\n    //     } */}\n    //   </div>\n    // </>\n  );\n}\n// /\n"],"sourceRoot":""}