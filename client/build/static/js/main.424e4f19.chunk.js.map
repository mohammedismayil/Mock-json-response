{"version":3,"sources":["utils/API.js","context/SidebarContext.js","components/ThemedSuspense.js","components/AccessibleNavigationAnnouncer.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["require","getAllMocks","axios","get","headers","getAllMocksWeb","getMockJson","id","updateMockJson","data","put","deleteMockJson","delete","saveMockJson","MockJsonData","post","deleteAllMocks","backupAllMocks","SidebarContext","React","createContext","SidebarProvider","children","useState","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider","ThemedSuspense","className","AccessibleNavigationAnnouncer","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","role","Home","useParams","count","setCount","createdID","setcreatedID","json","setjson","isFromEdit","reloadInputs","console","log","_id","handleFormSubmit","event","preventDefault","str","JSON","parse","e","IsJsonString","alert","API","then","res","catch","err","stringify","getMockDataForID","onChange","target","name","placeholder","disabled","onClick","length","to","Layout","lazy","Login","CreateAccount","ForgotPassword","App","path","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","fallback","usePreferences","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.424e4f19.chunk.js","sourcesContent":["import axios from 'axios';\nvar fs = require(\"fs\");\nexport default {\n  // Gets all MockJsons\n  getAllMocks: function () {\n    return axios.get(\"/api/MockJsons\", {\n      headers: {\n        \"Content-Type\": \"application/json  \",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  },\n  getAllMocksWeb: function () {\n    return axios.get(\"http://localhost:5000/api/MockJsons\", {\n      headers: {\n        \"Content-Type\": \"application/json  \",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  },\n  // Gets the MockJson with the given id\n  getMockJson: function (id) {\n    return axios.get(\"/api/MockJsons/\" + id);\n  },\n  // Gets the MockJson with the given id\n  updateMockJson: function (id, data) {\n    return axios.put(\"http://localhost:5000/api/mockjsons/\" + id, data);\n  },\n  // Deletes the MockJson with the given id\n  deleteMockJson: function (id) {\n    return axios.delete(\"/api/MockJsons/\" + id);\n  },\n  // Saves a MockJson to the database\n  saveMockJson: function (MockJsonData) {\n    return axios.post(\"/api/MockJsons\", MockJsonData);\n  },\n\n  // Deletes all Mocks\n  deleteAllMocks: function (id) {\n    return axios.get(\"/api/MockJsons/deleteAllMocks/\");\n  },\n  // Backup all Mocks\n  backupAllMocks: function (id) {\n    return axios.get(\"http://localhost:5000/api/MockJsons/backupMocks/\");\n  },\n};\n","import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen)\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false)\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  )\n\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n}\n","import React from 'react'\n\nfunction ThemedSuspense() {\n  return (\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\n      Loading...\n    </div>\n  )\n}\n\nexport default ThemedSuspense\n","import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('')\n  const location = useLocation()\n\n  useEffect(() => {\n    // ignore the /\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\n    } else {\n      setMessage('')\n    }\n  }, [location])\n\n  return (\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      {message}\n    </span>\n  )\n}\n\nexport default AccessibleNavigationAnnouncer\n","import React, { useState, useEffect } from \"react\";\n\nimport API from \"../utils/API\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\n\n//   componentDidMount() {\n//     // Runs after the first render() lifecycle((\n//     console.log(\"cunt\");\n//     console.log(this.props);\n//     if (this.state.isFromEdit) {\n//       this.getMockDataForID();\n//     }\n//   }\n\nexport default function Home() {\n  let { id } = useParams();\n  const [count, setCount] = useState(0);\n  const [createdID, setcreatedID] = useState(\"\");\n  const [json, setjson] = useState(\"\");\n  const [isFromEdit, setisFromEdit] = useState(false);\n  useEffect(() => {\n    if (count < 1) {\n      setTimeout(() => {\n        setCount(count + 1);\n        getMockDataForID(id);\n      }, 1000);\n    }\n  });\n\n  function handleInputChange(event) {\n    setjson(event.target.value);\n  }\n  function reloadInputs(data) {\n    console.log(\"reloading inputs\");\n    setjson(\"\");\n    setcreatedID(data._id);\n  }\n\n  function IsJsonString(str) {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n  function getMockDataForID(id) {\n    console.log(id);\n    if (id) {\n      API.getMockJson(id)\n        .then((res) => {\n          console.log(res.data);\n          setjson(JSON.stringify(res.data.json));\n          setcreatedID(res.data._id);\n          console.log(JSON.parse(res.data.json));\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    console.log(\"form submitted\");\n    if (json) {\n      if (IsJsonString(json)) {\n        if (isFromEdit) {\n          API.updateMockJson(id, { json: json })\n            .then((res) => reloadInputs(res.data))\n            .catch((err) => console.log(err));\n        } else {\n          API.saveMockJson({\n            json: json,\n          })\n            .then((res) => reloadInputs(res.data))\n            .catch((err) => console.log(err));\n        }\n      } else {\n        alert(\"enter a valid json\");\n      }\n    }\n  }\n\n  // const createdID = this.state.createdID;\n  return (\n    <div className=\"content-center justify-center pt-10\">\n      {isFromEdit ? (\n        <h1 className=\"font-bold text-center text-2xl\">Edit the json mock</h1>\n      ) : (\n        <h1 className=\"font-bold text-center text-2xl\">Add a new json mock</h1>\n      )}\n      <div className=\"m-auto w-1/2 content-center justify-center flex-col pt-10\">\n        <div>\n          <textarea\n            value={json}\n            onChange={handleInputChange}\n            name=\"json\"\n            placeholder=\"JSON (required)\"\n            className=\"h-40 w-full border border-green-800 px-2 py-2\"\n          />\n        </div>\n        <div className=\"flex content-center justify-center\">\n          <div className=\"content-center justify-center\">\n            {isFromEdit ? (\n              <button\n                disabled={!json}\n                onClick={handleFormSubmit}\n                className=\"bg-blue-700 rounded-sm text-white px-5 py-2 content-center justify-center w-24 mt-10\"\n              >\n                Edit\n              </button>\n            ) : (\n              <button\n                disabled={!json}\n                onClick={handleFormSubmit}\n                className=\"bg-green-700 rounded-lg text-white px-5 py-2 content-center justify-center w-24 mt-10\"\n              >\n                Add\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n      {\n        createdID.length > 0 ? (\n          <div>\n            <h2>Check out your mock json here:</h2>\n            <Link to={\"/\" + createdID}>http://localhost:3000/{createdID}</Link>\n          </div>\n        ) : (\n          <div></div>\n        )\n        // href={\"http:localhost:3000/\"+this.state.createdID}\n      }\n      )\n    </div>\n  );\n}\n// /\n","import React, { lazy } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport AccessibleNavigationAnnouncer from \"./components/AccessibleNavigationAnnouncer\";\nimport Home from \"./pages/Home\";\n// import MockJson from \"./pages/MockJson\";\n\nconst Layout = lazy(() => import(\"./containers/Layout\"));\nconst Login = lazy(() => import(\"./pages/Login\"));\nconst CreateAccount = lazy(() => import(\"./pages/CreateAccount\"));\nconst ForgotPassword = lazy(() => import(\"./pages/ForgotPassword\"));\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <AccessibleNavigationAnnouncer />\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/create-account\" component={CreateAccount} />\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\n\n          {/* Place new routes over this */}\n          <Route path=\"/admin\" component={Layout} />\n          {/* If you have an index page, you can remothis Redirect */}\n          {/* <Redirect exact from=\"/\" to=\"/login\" /> */}\n\n          {/* <Route path=\"/admin/mocks\" component={MockJson} /> */}\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/css/tailwind.output.css'\nimport App from './App'\nimport { SidebarProvider } from './context/SidebarContext'\nimport ThemedSuspense from './components/ThemedSuspense'\nimport { Windmill } from '@windmill/react-ui'\nimport * as serviceWorker from './serviceWorker'\n\n// if (process.env.NODE_ENV !== 'production') {\n//   const axe = require('react-axe')\n//   axe(React, ReactDOM, 1000)\n// }\n\nReactDOM.render(\n  <SidebarProvider>\n    <Suspense fallback={<ThemedSuspense />}>\n      <Windmill usePreferences>\n        <App />\n      </Windmill>\n    </Suspense>\n  </SidebarProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}